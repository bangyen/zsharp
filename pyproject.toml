[interrogate]
fail-under = 100
ignore-init-method = false
ignore-init-module = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-nested-functions = false
ignore-nested-classes = false
ignore-regex = ["^_"]
exclude = ["venv", ".git", "__pycache__", ".pytest_cache"]

[tool.pytest.ini_options]
addopts = "-v --tb=short"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "mps: marks tests that require MPS support",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 79
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes by default.
select = ["E", "F", "I"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# Type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Add type annotations gradually to improve code quality
# Priority order:
# 1. Public APIs (functions in __init__.py)
# 2. Core algorithms (optimizer.py)
# 3. Data processing (data.py)
# 4. Model definitions (models.py)
# 5. Training loops (train.py)

# Example type annotations to add:
# - Function parameters and return types
# - Class attributes
# - Generic types for collections
# - Union types for optional parameters
